#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(shinythemes)
library(jsonlite)
library(reshape2)
library(dplyr)
library(tidyr)
library(gt)
library(DT)
library(tibble)


# Define UI for application that draws a histogram
ui <- fluidPage(
     theme = shinytheme("paper"),

    # Application title
     titlePanel(title="Фінансова звітність підприємств"),
  

    # Sidebar with a slider input for number of bins 
    sidebarLayout(
        sidebarPanel(
          
          textInput("okpo", "Введіть єдрпоу підприємства",),
          actionButton("act","Знайти"),
        ),

        # Show a plot of the generated distribution
        mainPanel(
          
          
          textOutput("company"),
          tags$head(tags$style('#company {color:red;font:strong;font-weight:bold;font-size:18px;}')),
          
          tabsetPanel(type = "tab",   
          
                      tabPanel("Баланс", tableOutput("balance")),  
                      tabPanel("Звіт про фінансові результати", tableOutput("finrez")),
                      tabPanel("Інфо", verbatimTextOutput("companyinfo")))

        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output) {
  

  observeEvent(input$act,{
    
    print(input$okpo)
    if (input$okpo == "") {
      output$company <- renderText("Ви не ввели єдрпоу!")
      return()
    }

    
    if (is.na(as.numeric(as.character(input$okpo)))) {
      output$company <- renderText("Неправильний формат єдрпоу!")
      return()
    }

    
    if (nchar(as.character(input$okpo)) < 8) {
      output$company <- renderText("Довжина єдрпоу менше 8 символів!")
      return()
    }
    
    if (nchar(as.character(input$okpo)) > 9) {
      output$company <- renderText("Неправильний формат єдрпоу!")
      return()
    }
    

    
    
    files <- read.table("files.txt",sep = ";", header = T)
    jsonpath <- as.character(subset(files,as.numeric(minokpo) <= as.numeric(input$okpo) & 
                                          as.numeric(maxokpo) >= as.numeric(input$okpo), select=c("filepath")))

    jsondata <- jsonlite::fromJSON(jsonpath)
    
    companyName <- as.character(subset(jsondata,TIN == input$okpo, select=c("FN")))
    output$company <- renderText(companyName)
    
    
    if (companyName == "character(0)") {
      output$company <- renderText("Про дану компанію Інформація відсутня :(")
      return()
    }
    
    print(companyName)
    
    companyInfo <- subset(jsondata,TIN == input$okpo, select=c("A","K","R","T","S"))
  
    
    names(companyInfo)[1] <- "Адреса"
    names(companyInfo)[2] <- "КВЕД"
    names(companyInfo)[3] <- "Керівник"
    names(companyInfo)[4] <- "Телефон"
    names(companyInfo)[5] <- "Середня к-ть праціників"
    
    companyInfo <- as.data.frame(t(companyInfo))
    
    companyInfo <- format(companyInfo, justify = "left")
    
    names(companyInfo)[0] <- ""
    names(companyInfo)[1] <- ""
    
    
    res <- jsondata[jsondata$TIN == input$okpo,-c(2:10)]
    res[res == ''] <- 0
    res[is.na(res)] <- 0
    
    res_melted <- melt(res, id=c("TIN"))
  
    
    #44776595
    res_melted[is.na(res_melted)] <- 0
    mutate(res_melted, value = as.numeric(gsub(",", ".", gsub("\\.", "", value)))) -> res_melted
    res_melted %>% separate(variable, c("YEAR", "ROW"), "_") -> res_melted
    
    
    finzvit <- dcast(res_melted, TIN + ROW ~ YEAR, value.var = "value",fun.aggregate = sum)
    
    
    balance_aricles <- read.csv("BALANCE_ARTICLES.txt", sep = ";", header = T, encoding = '1251')
    #30525175
    #jsondata[jsondata$TIN == '30525175',][[2]]
    #jsondata[jsondata$TIN == '00016490',][[2]]
    
    #jjj <- jsonlite::fromJSON('D:/xml/www334.json')
    #rrr <- jjj[jjj$TIN == '00010808',]
    #rr<-rrr[[8]][[1]]
    #rr <- cbind(1,rr)
    #rr <- melt(rr, id=c("1"))
    #rr %>% separate(variable, c("YEAR", "ROW"), "_") -> rr
    
    finrez_aricles <- read.csv("FINREZ_ARTICLES.txt", sep = ";", header = T, encoding = '1251')
    
    colcount <- length(finzvit)-2

    
    if (colcount == 1){
      finzvit[, c('2', '1', '0')] = 0
      }
    if (colcount == 2){
      finzvit[, c('1', '0')] = 0
  
        }
    if (colcount == 3){
      finzvit[, c('0')] = 0
      }
    
    finzvit <- subset(finzvit, select=c("TIN","ROW","0","1","2","3"))

    #finzvit[, 'empty_column'] = NA
    
    names(finzvit)[3] <- "01.01.2020"
    names(finzvit)[4] <- "01.01.2021"
    names(finzvit)[5] <- "01.01.2022"
    names(finzvit)[6] <- "01.01.2023"
    
    
    balance <- subset(merge(balance_aricles, finzvit[,c(2:6)], all.x=TRUE), select=c(2,3,1,7,6,5,4))
    names(balance)[2] <- "Стаття"
    names(balance)[3] <- "Код рядка"
    balance <- balance[order(balance$id, decreasing = FALSE), ]
    
    finrez <- subset(merge(finrez_aricles, finzvit[,c(2:6)], all.x=TRUE), select=c(2,3,1,7,6,5,4))
    names(finrez)[2] <- "Стаття"
    names(finrez)[3] <- "Код рядка"
    finrez <- finrez[order(finrez$id, decreasing = FALSE), ] 
    


    
    
    output$balance <- renderTable({
      balance
    },bordered = F,striped = F,rownames = F, na = "", hover = T, spacing = c("xs")) 
    
    output$finrez <- renderTable({
      finrez
    },bordered = F,striped = F,rownames = F, na = "", hover = T) 
    
    output$companyinfo <- renderPrint({
      companyInfo
    }) 
    
    
  })
}

# Run the application 
shinyApp(ui = ui, server = server)
